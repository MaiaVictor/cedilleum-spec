data Nat : ★ =
  | Z : Nat
  | S : Nat ➔ Nat
  .

pred : Nat ➔ Nat
     = λ n . μ _ . n @...
       { Z ↦ Z
       | S r ↦ toNat/_ r
       } .

pred' : Nat ➔ Nat
     = λ n . μ _ . n @...
       { Z ↦ n
       | S r ↦ toNat/_ r
       } .

pred'' : Nat ➔ Nat
     = λ n . μ' n @...
       { Z ↦ n
       | S r ↦ toNat/_ r
       } .

-- toNat/pred : Nat/pred ➔ Nat

iterate : ∀ R : ★ . (R ➔ R) ➔ R ➔ Nat ➔ R
        = Λ R . λ f . λ r . λ n . μ it . n @...
            { Z ↦ r
            | S r' ↦ f (it r')
            }
-- it : Nat/it ➔ R

minus : Nat ➔ Nat ➔ Nat
      = λ n . λ m . μ mi . m @...
        { Z ↦ n
        | S r ↦ pred (mi r)
        }

lt : Nat ➔ Nat ➔ Bool
   = λ n . λ m . μ _ . (minus (S n) m) @...
     { Z ↦ tt
     | S r ↦ ff
     }

divide : Nat ➔ Nat ➔ Nat
       = λ n . λ m . μ div . n @...
         { Z ↦ Z
         | S r ↦ ite (lt (S (toNat/div r)) m)
             Z
             (let predDiv = λ x : Nat/div . μ' x { Z ↦ x | S r' ↦ r'}
              in S (div (iterate predDiv r (pred m))))
         }

